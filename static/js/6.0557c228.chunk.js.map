{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Dialogs/Dialogs.module.scss","hoc/withAuthRedirect.tsx","components/Dialogs/DialogList/DialogItem/DialogItem.module.scss","components/Dialogs/Chat/ChatItem/Message/Message.module.scss","components/Dialogs/DialogList/DialogItem/DialogItem.tsx","components/Dialogs/DialogList/DialogList.tsx","components/Dialogs/Chat/ChatItem/Message/Message.tsx","components/Dialogs/Chat/ChatItem/ChatItem.tsx","components/Dialogs/Chat/ChatItem/AddMessageForm.tsx","components/Dialogs/Chat/Chat.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirectComponent","Component","connect","props","restProps","to","DialogItem","React","memo","id","avatar","name","path","className","style","dialog","activeClassName","activeDialog","src","alt","DialogList","dialogsElements","dialogs","map","d","dialogItem","dialogHeader","dialogBody","Message","chatItem","message","photo","userName","chat","chat__userAvatar","user","color","paddingLeft","ChatItem","messages","useSelector","useState","isAutoScroll","setIsAutoScroll","messagesElement","m","messagesRef","useRef","messagesAnchor","useEffect","current","scrollIntoView","behavior","messageHeader","type","placeholder","messagesBody","ref","onScroll","e","el","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","AddMessageForm","status","setMessage","dispatch","useDispatch","onSubmitHandler","console","log","trim","sendMessage","sendButton","STATUS_CHAT","Ready","btnSend","btnDisabled","messageBottom","onChange","messageText","onKeyPress","key","preventDefault","btn","disabled","onClick","Chat","startMessagesListening","stopMessagesListening","Dialogs","DialogsContainer","compose","dialogPage","addMessageAC"],"mappings":"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","file":"static/js/6.0557c228.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Gkkf\",\"dialogItem\":\"Dialogs_dialogItem__2Vaf7\",\"dialogHeader\":\"Dialogs_dialogHeader__gZy7z\",\"dialogBody\":\"Dialogs_dialogBody__1O5Nh\",\"messages\":\"Dialogs_messages__1J3nn\",\"messageHeader\":\"Dialogs_messageHeader__cyzRW\",\"messagesBody\":\"Dialogs_messagesBody__7bGZw\",\"messageBottom\":\"Dialogs_messageBottom__2Zy_K\",\"btn\":\"Dialogs_btn__3xYgq\",\"btnSend\":\"Dialogs_btnSend__131Me\",\"btnDisabled\":\"Dialogs_btnDisabled__2b8yX\"};","import React, {ComponentType} from \"react\";\nimport {AppStateType} from \"../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsType = {\n   isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n   return {\n      isAuth: state.auth.isAuth\n   }\n}\n\nexport function withAuthRedirectComponent<T>(Component: ComponentType<T>) {\n\n   const RedirectComponent = (props: MapStateToPropsType) => {\n      const {isAuth, ...restProps} = props;\n\n      if (!isAuth) return <Redirect to={'/login'}/>\n\n      return <Component {...restProps as T}/>\n   }\n\n   return connect(mapStateToProps)(RedirectComponent);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__XEMO5\",\"activeDialog\":\"DialogItem_activeDialog__2UVq-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Message_chat__Bjvcd\",\"chat__userAvatar\":\"Message_chat__userAvatar__UT-WP\",\"message\":\"Message_message__3nerD\"};","import style from \"./DialogItem.module.scss\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\nimport {DialogsType} from \"../../../../redux/dialog-reducer\";\n\n\n\nconst DialogItem:React.FC<DialogsType> = React.memo(({id,avatar,name}) => {\n   let path = `/dialogs/${id}`;\n   return (\n      <div className={style.dialog}>\n         <NavLink to={path} activeClassName={style.activeDialog}>\n            <img\n               src={avatar}\n               alt=\"avatar\"\n            />\n            {name}\n         </NavLink>\n      </div>\n   );\n});\n\nexport default DialogItem;","import React from \"react\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport style from \"../Dialogs.module.scss\";\nimport {DialogsType} from \"../../../redux/dialog-reducer\";\n\ntype DialogListPropsType = {\n   dialogs: DialogsType[]\n}\nexport const DialogList: React.FC<DialogListPropsType> = React.memo(({dialogs}) => {\n\n   const dialogsElements = dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>);\n\n   return (\n      <div className={style.dialogItem}>\n         <div className={style.dialogHeader}>Dialogs:</div>\n         <div className={style.dialogBody}>\n            {dialogsElements}\n         </div>\n      </div>\n   )\n})","import style from \"./Message.module.scss\";\nimport React from \"react\";\nimport user from '../../../../../assets/images/user.png'\nimport {ChatMessageType} from \"../../../../../redux/chat-reducer\";\n\ntype MessagePropsType = {\n   chatItem: ChatMessageType\n}\n\n\nexport const Message: React.FC<MessagePropsType> = React.memo(({chatItem}) => {\n\n   const {message, photo, userName} = chatItem;\n\n   return <div className={style.chat}>\n      <div className={style.chat__userAvatar}>\n         <img src={photo ? photo : user} alt=\"avatar\"/>\n      </div>\n      <div>\n         <div style={{color: '#304159', paddingLeft: '10px'}}>{userName}</div>\n         <div className={style.message}>{message}</div>\n      </div>\n   </div>\n});","import React, {useEffect, useRef, useState} from \"react\";\nimport {Message} from \"./Message/Message\";\nimport style from \"../../Dialogs.module.scss\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../../redux/redux-store\";\nimport {ChatMessageType} from \"../../../../redux/chat-reducer\";\n\n\ntype MessagesListPropsType = {\n   sendMessage: (newMessage: string) => void\n}\n\nexport const ChatItem: React.FC<MessagesListPropsType> = React.memo(() => {\n\n   const messages = useSelector<AppStateType, ChatMessageType[]>(state => state.chat.messages)\n   const [isAutoScroll, setIsAutoScroll] = useState(true);\n\n   const messagesElement = messages.map(m =>\n      <Message key={m.id} chatItem={m}/>\n   );\n   const messagesRef = useRef<HTMLDivElement>(null);\n   const messagesAnchor = useRef<HTMLDivElement>(null);\n\n   const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n      const el = e.currentTarget;\n      if (Math.abs((el.scrollHeight - el.scrollTop) - el.clientHeight) < 300){\n         !isAutoScroll && setIsAutoScroll(true)\n      } else {\n         isAutoScroll && setIsAutoScroll(false)\n      }\n   }\n   useEffect(() => {\n      if (isAutoScroll) {\n       // messagesRef.current?.scrollTo(0, messagesRef.current.scrollHeight);\n         messagesAnchor.current?.scrollIntoView({behavior: 'smooth'})\n      }\n\n   }, [messages, isAutoScroll])\n\n   return (\n      <div className={style.messages}>\n         <div className={style.messageHeader}>\n            <i className=\"fa fa-search\"/>\n            <input\n               type=\"search\"\n               placeholder=\"Search message...\"\n               name=\"form\"\n            />\n            <i className=\"fa fa-sliders\"/>\n         </div>\n\n         <div className={style.messagesBody} ref={messagesRef} onScroll={scrollHandler}>\n            {messagesElement}\n            <div ref={messagesAnchor}/>\n         </div>\n      </div>\n   )\n})\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport style from \"../../Dialogs.module.scss\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {sendMessage} from \"../../../../redux/chat-reducer\";\nimport {AppStateType} from \"../../../../redux/redux-store\";\nimport {STATUS_CHAT} from \"../../../../api/chat-api\";\n\ntype ChatListPropsType = {\n}\n\nexport const AddMessageForm: React.FC<ChatListPropsType> = () => {\n\n   const status = useSelector<AppStateType, STATUS_CHAT>(state => state.chat.status)\n\n   const [message, setMessage] = useState('');\n   const dispatch = useDispatch();\n\n\n\n   const addNewMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\n      setMessage(e.currentTarget.value);\n   }\n\n   const onEnterHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n      if (e.key === 'Enter') {\n         e.preventDefault()\n         onSubmitHandler();\n      }\n   }\n\n   const onSubmitHandler = () => {\n      console.log('click')\n      if (message.trim() === '') {\n         return;\n      }\n      dispatch(sendMessage(message))\n      setMessage('');\n   }\n   const sendButton = `fa fa-paper-plane ${status === STATUS_CHAT.Ready ? style.btnSend : style.btnDisabled}`;\n\n   return (\n      <div className={style.messageBottom}>\n            <textarea\n               onChange={addNewMessage}\n               className={style.messageText}\n               placeholder={'Введите сообщение...'}\n               value={message}\n               onKeyPress={onEnterHandler}\n            />\n         <div className={style.btn}>\n            <button\n               disabled={status !== STATUS_CHAT.Ready}\n               onClick={onSubmitHandler}\n            ><i className={sendButton}/></button>\n            <i className=\"fa fa-microphone\"/>\n         </div>\n      </div>\n   )\n}","import React, {useEffect} from \"react\";\nimport {ChatItem} from \"./ChatItem/ChatItem\";\nimport {AddMessageForm} from \"./ChatItem/AddMessageForm\";\nimport {useDispatch} from \"react-redux\";\nimport {startMessagesListening, stopMessagesListening} from \"../../../redux/chat-reducer\";\n\ntype ChatPropsType = {\n   sendMessage: (value: string) => void\n}\n\n\nexport const Chat: React.FC<ChatPropsType> = ({sendMessage}) => {\n\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n      dispatch(startMessagesListening());\n      return () => {\n         dispatch(stopMessagesListening());\n      }\n   }, [dispatch])\n\n\n   return (\n      <div>\n         <ChatItem sendMessage={sendMessage}/>\n         <AddMessageForm/>\n      </div>\n   )\n}\n","import React from 'react';\nimport style from './Dialogs.module.scss';\nimport {DialogList} from \"./DialogList/DialogList\";\nimport {DialogsType} from \"../../redux/dialog-reducer\";\nimport {Chat} from \"./Chat/Chat\";\n\ntype DialogsPropsType = {\n   dialogs: DialogsType[]\n   sendMessage: (newMessage: string) => void\n}\n\nexport const Dialogs: React.FC<DialogsPropsType> = React.memo((props) => {\n   const {dialogs, sendMessage} = props;\n\n   return (\n      <div className={style.dialogs}>\n         <DialogList dialogs={dialogs}/>\n         <Chat sendMessage={sendMessage} />\n      </div>\n   );\n});\n\n\n","import {connect} from \"react-redux\";\nimport {Dialogs} from \"./Dialogs\";\nimport {addMessageAC, DialogsType} from \"../../redux/dialog-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport React from \"react\";\n\n\ntype MapStateToPropsType = {\n   dialogs: DialogsType[]\n}\n\ntype MapDispatchToPropsType = {\n   sendMessage: (newMessage:string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n   return {\n      dialogs: state.dialogPage.dialogs,\n   }\n}\n\n\nconst DialogsContainer = compose<React.ComponentType>(\n   connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\n      sendMessage: addMessageAC,\n   }),\n   withAuthRedirectComponent\n)(Dialogs);\n\nexport default DialogsContainer;"],"sourceRoot":""}